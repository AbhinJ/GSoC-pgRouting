BEGIN;

UPDATE edge_table SET cost = sign(cost), reverse_cost = sign(reverse_cost);
SELECT CASE WHEN NOT min_version('3.4.0') THEN plan(1) ELSE plan(3) END;

CREATE OR REPLACE FUNCTION edge_cases()
RETURNS SETOF TEXT AS
$BODY$
BEGIN

IF NOT min_version('3.4.0') THEN
  RETURN QUERY
  SELECT skip(1, 'Function is new on 3.4.0');
  RETURN;
END IF;

-- 0 edge, 0 vertex test

PREPARE q1 AS
SELECT id, source, target, cost, reverse_cost
FROM edge_table
WHERE id > 18;

RETURN QUERY
SELECT is_empty('q1', 'Graph with 0 edge and 0 vertex');

PREPARE hawickCircuits1 AS
SELECT * FROM pgr_hawickcircuits('q1');

RETURN QUERY
SELECT is_empty('hawickCircuits1', 'Graph with 0 edge and 0 vertex -> Empty row is returned');


-- 1 vertex test

PREPARE q2 AS
SELECT id, source, target, cost, reverse_cost
FROM edge_table
WHERE id = 2;

PREPARE hawickCircuits2 AS
SELECT * FROM pgr_hawickcircuits('q2');

RETURN QUERY
SELECT is_empty('hawickCircuits2', 'One vertex graph can not have circuits -> Empty row is returned');

END;
$BODY$
LANGUAGE plpgsql;

SELECT edge_cases();

SELECT * FROM finish();
ROLLBACK;
